apply plugin: "java"
apply plugin: 'eclipse'

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]
version = '1.0'

project.ext.assetsDir = new File("../core/assets");
project.ext.mainClassName = "com.pineconeindustries.client.desktop.ServerLauncher"

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task buildServer(type: Jar) {
	
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': "com.pineconeindustries.client.desktop.ServerLauncher"
    }
}


task buildClient(type: Jar) {
	
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': "com.pineconeindustries.client.desktop.ClientLauncher"
    }
}
task fatJar(type : Jar){

	manifest {
        attributes 'Implementation-Title': 'Starmyth Server',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.pineconeindustries.client.desktop.ServerLauncher'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
